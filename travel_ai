from flask import Flask, jsonify, request
from flask_cors import CORS
from datetime import datetime
from math import floor

app = Flask(__name__)
CORS(app)

# Destination data with average prices
DESTINATION_AVERAGES = {
    "Paris": {
        "flight": 600,
        "hotelPerNight": 150,
        "airbnbPerNight": 100,
        "minDays": 1,
        "maxDays": 14
    },
    "Tokyo": {
        "flight": 900,
        "hotelPerNight": 120,
        "airbnbPerNight": 80,
        "minDays": 1,
        "maxDays": 10
    },
    "New York": {
        "flight": 400,
        "hotelPerNight": 200,
        "airbnbPerNight": 120,
        "minDays": 1,
        "maxDays": 10
    },
    "Bali": {
        "flight": 1200,
        "hotelPerNight": 80,
        "airbnbPerNight": 50,
        "minDays": 1,
        "maxDays": 21
    },
    "London": {
        "flight": 550,
        "hotelPerNight": 180,
        "airbnbPerNight": 110,
        "minDays": 1,
        "maxDays": 14
    }
}

# Mock database
TRIP_DATA = {
    "flights": {
        "Paris": [
            {"id": "AF123", "airline": "Air France", "price": 550, "departure": "08:00", "airport": "JFK"},
            {"id": "BA456", "airline": "British Airways", "price": 600, "departure": "14:30", "airport": "EWR"}
        ],
        "Tokyo": [
            {"id": "JL789", "airline": "JAL", "price": 850, "departure": "11:45", "airport": "JFK"},
            {"id": "NH012", "airline": "ANA", "price": 900, "departure": "09:15", "airport": "LAX"}
        ],
        "New York": [
            {"id": "DL123", "airline": "Delta", "price": 380, "departure": "07:30", "airport": "LAX"},
            {"id": "AA456", "airline": "American Airlines", "price": 420, "departure": "15:45", "airport": "SFO"}
        ],
        "Bali": [
            {"id": "GA789", "airline": "Garuda Indonesia", "price": 1150, "departure": "22:15", "airport": "LAX"},
            {"id": "SQ012", "airline": "Singapore Airlines", "price": 1250, "departure": "18:30", "airport": "JFK"}
        ],
        "London": [
            {"id": "BA789", "airline": "British Airways", "price": 520, "departure": "19:15", "airport": "JFK"},
            {"id": "VA012", "airline": "Virgin Atlantic", "price": 580, "departure": "12:45", "airport": "EWR"}
        ]
    },
    "stays": {
        "Paris": [
            {"id": "H1", "name": "Le Meurice", "price": 200, "type": "hotel", "category": "luxury"},
            {"id": "H2", "name": "Ibis Budget", "price": 80, "type": "hotel", "category": "budget"},
            {"id": "A1", "name": "Charming Paris Apartment", "price": 120, "type": "airbnb", "category": "entire-home"}
        ],
        "Tokyo": [
            {"id": "H3", "name": "Park Hotel Tokyo", "price": 150, "type": "hotel", "category": "business"},
            {"id": "H4", "name": "Capsule Hotel", "price": 40, "type": "hotel", "category": "budget"},
            {"id": "A2", "name": "Traditional Ryokan", "price": 90, "type": "airbnb", "category": "unique-stay"}
        ],
        "New York": [
            {"id": "H5", "name": "The Plaza", "price": 250, "type": "hotel", "category": "luxury"},
            {"id": "H6", "name": "Pod Times Square", "price": 150, "type": "hotel", "category": "budget"},
            {"id": "A3", "name": "Manhattan Loft", "price": 180, "type": "airbnb", "category": "entire-home"}
        ],
        "Bali": [
            {"id": "H7", "name": "Four Seasons Bali", "price": 100, "type": "hotel", "category": "luxury"},
            {"id": "H8", "name": "Bali Backpackers", "price": 30, "type": "hotel", "category": "budget"},
            {"id": "A4", "name": "Jungle Treehouse", "price": 60, "type": "airbnb", "category": "unique-stay"}
        ],
        "London": [
            {"id": "H9", "name": "The Savoy", "price": 220, "type": "hotel", "category": "luxury"},
            {"id": "H10", "name": "Travelodge", "price": 90, "type": "hotel", "category": "budget"},
            {"id": "A5", "name": "London Flat", "price": 130, "type": "airbnb", "category": "entire-home"}
        ]
    },
    "activities": {
        "Paris": [
            {"id": 1, "name": "Eiffel Tower Tour", "price": 50},
            {"id": 2, "name": "Louvre Ticket", "price": 30},
            {"id": 3, "name": "Seine River Cruise", "price": 40}
        ],
        "Tokyo": [
            {"id": 4, "name": "Shibuya Sky Ticket", "price": 20},
            {"id": 5, "name": "Sushi Class", "price": 60},
            {"id": 6, "name": "Robot Restaurant Show", "price": 45}
        ],
        "New York": [
            {"id": 7, "name": "Statue of Liberty Tour", "price": 35},
            {"id": 8, "name": "Broadway Show", "price": 120},
            {"id": 9, "name": "Met Museum Ticket", "price": 25}
        ],
        "Bali": [
            {"id": 10, "name": "Waterfall Tour", "price": 40},
            {"id": 11, "name": "Balinese Cooking Class", "price": 50},
            {"id": 12, "name": "Sunset Uluwatu", "price": 30}
        ],
        "London": [
            {"id": 13, "name": "London Eye Ticket", "price": 45},
            {"id": 14, "name": "West End Show", "price": 80},
            {"id": 15, "name": "British Museum Tour", "price": 25}
        ]
    }
}

@app.route('/')
def home():
    return "Travely.ai Flask Server is Running. Try /calculate_trip"

@app.route('/search_destinations', methods=['GET'])
def search_destinations():
    query = request.args.get('query', '').lower()
    matches = [city for city in DESTINATION_AVERAGES.keys() if query in city.lower()]
    return jsonify(matches)

@app.route('/calculate_trip', methods=['POST'])
def calculate_trip():
    data = request.json
    city = data['city']
    budget = data['budget']
    custom_days = data.get('customDays')  # New parameter for custom days
    
    avg = DESTINATION_AVERAGES[city]
    
    # Immediate warning if flight exceeds 50% of budget
    if avg['flight'] > budget * 0.5:
        return jsonify({
            'warning': f"Flight costs (${avg['flight']}) exceed 50% of your budget. Please increase your budget.",
            'minimumBudget': avg['flight'] * 2  # Suggest minimum required budget
        }), 400
    
    # Calculate available budget after flight (25% for lodging)
    lodging_budget = budget * 0.25
    daily_lodging = avg['hotelPerNight']  # Default to hotel
    
    # Calculate suggested days
    suggested_days = min(
        max(
            floor(lodging_budget / daily_lodging),
            avg['minDays']
        ),
        avg['maxDays']
    )
    
    # Use custom days if provided (with validation)
    final_days = suggested_days
    if custom_days:
        required_lodging = custom_days * daily_lodging
        if required_lodging > lodging_budget:
            return jsonify({
                'warning': f"{custom_days} days requires ${required_lodging} for lodging (${daily_lodging}/night).",
                'requiredBudgetIncrease': required_lodging - lodging_budget,
                'suggestedDays': suggested_days
            }), 400
        final_days = custom_days
    
    return jsonify({
        'tripLength': final_days,
        'flightBudget': avg['flight'],
        'lodgingBudget': daily_lodging * final_days,
        'activityBudget': budget * 0.25,
        'suggestedDays': suggested_days,
        'minimumBudget': avg['flight'] * 2
    })

@app.route('/flights')
def get_flights():
    city = request.args.get('city')
    max_price = float(request.args.get('max_price', 10000))
    flights = [f for f in TRIP_DATA['flights'][city] if f['price'] <= max_price]
    return jsonify(flights)

@app.route('/stays')
def get_stays():
    city = request.args.get('city')
    max_price = float(request.args.get('max_price', 10000))
    stays = [s for s in TRIP_DATA['stays'][city] if s['price'] <= max_price]
    return jsonify(stays)

@app.route('/activities')
def get_activities():
    city = request.args.get('city')
    return jsonify(TRIP_DATA['activities'][city])

@app.route('/book', methods=['POST'])
def book_trip():
    data = request.json
    total_cost = (
        data['flight']['price'] + 
        (data['stay']['price'] * data['tripLength']) +
        sum(t['price'] for t in data['activities'])
    )
    
    confirmation_id = f"TRV-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    return jsonify({
        "status": "success",
        "confirmation_id": confirmation_id,
        "total_cost": total_cost,
        "itinerary": {
            "city": data['city'],
            "dates": data['dates'],
            "flight": data['flight'],
            "stay": data['stay'],
            "activities": data['activities']
        }
    })

if __name__ == '__main__':
    app.run(port=5001, debug=True)