from flask import Flask, jsonify, request, abort
from flask_cors import CORS
from datetime import datetime, timedelta
from math import floor
import requests
import time
import os
from functools import wraps

app = Flask(__name__)
CORS(app)

# Configuration
RAPIDAPI_KEY = os.getenv('RAPIDAPI_KEY', 'your_default_key_here')
RAPIDAPI_HOST = 'skyscanner50.p.rapidapi.com'  # Example API host
BASE_API_URL = 'https://skyscanner50.p.rapidapi.com/api/v1/'

# Rate limiting setup
last_request_time = 0
REQUEST_DELAY = 1  # 1 second between requests

# Destination data with average prices
DESTINATION_AVERAGES = {
    "Paris": {
        "flight": 600,
        "hotelPerNight": 150,
        "airbnbPerNight": 100,
        "minDays": 1,
        "maxDays": 14
    },
    "Tokyo": {
        "flight": 900,
        "hotelPerNight": 120,
        "airbnbPerNight": 80,
        "minDays": 1,
        "maxDays": 10
    },
    "New York": {
        "flight": 400,
        "hotelPerNight": 200,
        "airbnbPerNight": 120,
        "minDays": 1,
        "maxDays": 10
    }
}

# Mock data fallback
TRIP_DATA = {
    "flights": {
        "Paris": [
            {"id": "AF123", "airline": "Air France", "price": 550, "departure": "08:00", "airport": "JFK"},
            {"id": "BA456", "airline": "British Airways", "price": 600, "departure": "14:30", "airport": "EWR"}
        ],
        "Tokyo": [
            {"id": "JL789", "airline": "JAL", "price": 850, "departure": "11:45", "airport": "JFK"}
        ]
    },
    "stays": {
        "Paris": [
            {"id": "H1", "name": "Le Meurice", "price": 200, "type": "hotel"},
            {"id": "A1", "name": "Paris Apartment", "price": 120, "type": "airbnb"}
        ]
    },
    "activities": {
        "Paris": [
            {"id": 1, "name": "Eiffel Tower Tour", "price": 50},
            {"id": 2, "name": "Louvre Museum", "price": 30}
        ]
    }
}

def rate_limited(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        global last_request_time
        elapsed = time.time() - last_request_time
        if elapsed < REQUEST_DELAY:
            time.sleep(REQUEST_DELAY - elapsed)
        last_request_time = time.time()
        return f(*args, **kwargs)
    return decorated_function

def call_rapidapi(endpoint, params=None):
    """Generic function to call RapidAPI endpoints"""
    headers = {
        'X-RapidAPI-Key': RAPIDAPI_KEY,
        'X-RapidAPI-Host': RAPIDAPI_HOST
    }
    
    try:
        response = requests.get(
            BASE_API_URL + endpoint,
            headers=headers,
            params=params or {}
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        app.logger.error(f"RapidAPI request failed: {str(e)}")
        return None

@app.route('/api/flights', methods=['GET'])
@rate_limited
def get_flights():
    city = request.args.get('city')
    if not city:
        abort(400, description="Missing 'city' parameter")
    
    # Try RapidAPI first
    api_params = {
        'origin': 'JFK',
        'destination': city,
        'date': (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')
    }
    
    api_response = call_rapidapi('searchFlights', api_params)
    
    if api_response:
        flights = [{
            'id': f.get('id') or f.get('flight_number'),
            'airline': f.get('carrier', {}).get('name', 'Unknown'),
            'price': f.get('price', 0),
            'departure': f.get('departure_time', ''),
            'airport': f.get('origin', {}).get('iata', '')
        } for f in api_response.get('data', [])]
    else:
        # Fallback to mock data
        flights = TRIP_DATA['flights'].get(city, [])
    
    return jsonify(flights)

@app.route('/api/stays', methods=['GET'])
@rate_limited
def get_stays():
    city = request.args.get('city')
    if not city:
        abort(400, description="Missing 'city' parameter")
    
    # Fallback to mock data (replace with actual API call)
    stays = TRIP_DATA['stays'].get(city, [])
    return jsonify(stays)

@app.route('/api/activities', methods=['GET'])
def get_activities():
    city = request.args.get('city')
    if not city:
        abort(400, description="Missing 'city' parameter")
    
    return jsonify(TRIP_DATA['activities'].get(city, []))

@app.route('/api/calculate', methods=['POST'])
def calculate_trip():
    data = request.get_json()
    if not data:
        abort(400, description="No JSON data provided")
    
    city = data.get('city')
    budget = data.get('budget')
    
    if not city or not budget:
        abort(400, description="Missing 'city' or 'budget'")
    
    avg = DESTINATION_AVERAGES.get(city)
    if not avg:
        abort(404, description=f"Destination '{city}' not found")
    
    # Basic trip calculation logic
    flight_cost = avg['flight']
    daily_lodging = avg['hotelPerNight']
    available_for_lodging = budget * 0.25  # 25% of budget for lodging
    
    suggested_days = min(
        max(floor(available_for_lodging / daily_lodging), avg['minDays']),
        avg['maxDays']
    )
    
    return jsonify({
        'city': city,
        'suggestedDays': suggested_days,
        'flightCost': flight_cost,
        'dailyLodgingCost': daily_lodging,
        'minBudgetRequired': flight_cost + (avg['minDays'] * daily_lodging)
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': str(error)}), 404

@app.errorhandler(400)
def bad_request(error):
    return jsonify({'error': str(error)}), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)